# Config for MT training

##Note that you may not have some of the directories you are storing the files to, in such case, make the directory by simpley running the following commands
#mkdir <whole path of your directory>

###I am assuming you are training jw corpus, so if you use any other corpus, change the name, and also check the paths before running

save_data: /home/akandimalla/practicum/data/en_hi/preprocessed/vocabulary/IITB 


# Corpus opts:
data:
    train:
        path_src: /home/akandimalla/practicum/data/en_hi/preprocessed/IITB.en-hi.bpe.en
        path_tgt: /home/akandimalla/practicum/data/en_hi/preprocessed/IITB.en-hi.bpe.hi
    valid:
        path_src: /home/akandimalla/practicum/data/en_hi/preprocessed/dev.bpe.en
        path_tgt: /home/akandimalla/practicum/data/en_hi/preprocessed/dev.bpe.hi

subword_nbest: 1
subword_alpha: 0.0
#### Filter
src_seq_length: 150
tgt_seq_length: 150

# silently ignore empty lines in the data
skip_empty_level: silent


# # Vocab opts
# ### vocab:
src_vocab: /home/akandimalla/practicum/data/en_hi/preprocessed/vocabulary/IITB.vocab.src
tgt_vocab: /home/akandimalla/practicum/data/en_hi/preprocessed/vocabulary/IITB.vocab.tgt
#src_vocab_size: ****  ##check the number of words in vocab_jw.en, simple way to run wc -l ~path/vocab_jw.en that will show the number of lines, each line contain one word, so just copy and paste here the number of lines
#tgt_vocab_size: ****  ##check the number of words in vocab_jw.bn, simple way to run wc -l ~path/vocab_jw.bn that will show the number of lines, each line contain one word, so just copy and paste here the number of lines
vocab_size_multiple: 8
src_words_min_frequency: 1
tgt_words_min_frequency: 1

# # Model training parameters

# General opts
save_model: /home/akandimalla/practicum/Models/en--hi  #/home/..../practicum2/models/en--bn  en--bn stands for language pair, in any directrion
keep_checkpoint: 60
save_checkpoint_steps: 10000
average_decay: 0.0005
seed: 1234
report_every: 100
train_steps: 150000
valid_steps: 10000

# Batching
queue_size: 1024
bucket_size: 32768
pool_factor: 8192
world_size: 1
gpu_ranks: [0]
batch_type: "tokens"
batch_size: 3072
valid_batch_size: 5120
batch_size_multiple: 1
max_generator_batches: 0
accum_count: [2]
accum_steps: [0]

# Optimization
model_dtype: "fp32"
optim: "adam"
learning_rate: 2.0
warmup_steps: 6000
decay_method: "noam"
adam_beta1: 0.9
adam_beta2: 0.98
max_grad_norm: 0
label_smoothing: 0.1
param_init: 0
param_init_glorot: true
normalization: "tokens"

# Model
encoder_type: transformer
decoder_type: transformer
enc_layers: 6
dec_layers: 6
heads: 8
rnn_size: 512
word_vec_size: 512
transformer_ff: 2048
dropout_steps: [0]
dropout: [0.1]
attention_dropout: [0.1]
position_encoding: true
